type Query {
    hello: String
    book(isbn: ID!): Book
    timeline(id: ID!): Timeline
    tasks(first: Int, after: String): TaskConnection!
    batchSizeExample: [BatchSizeExample!]!
}


type Mutation {
	newTask(text: TaskText!): Task!
	updateTaskStatus(id: ID!, status: TaskStatus!): Task
}


type Author {
	name: String!
}

type Book {
	isbn: ID!
	title: String!
	author: Author!
}


type Timeline {
	id: ID!
	tweets: [Tweet!]!
}

type Tweet {
	text: String!
	user: User!
}

type User {
	name: String!
}


type Task {
	id: ID!
	text: TaskText!
	status: TaskStatus!
}

type TaskEdge {
	node: Task!
	cursor: String!
}

type PageInfo {
	hasPreviousPage: Boolean!
	hasNextPage: Boolean!
	startCursor: String
	endCursor: String
}

type TaskConnection {
	edges: [TaskEdge!]!
	pageInfo: PageInfo!
}

scalar TaskText

enum TaskStatus {
	TODO
	DOING
	DONE
}

type BatchSizeExample {
	id: ID!
	value: String
}
